// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql';
import { User, SignInPayload, SignInErrors } from '../types';
import { Context } from '../types';

type EmailError = 'REQUIRED' | 'EMAIL' | 'ALREADY_EXISTS' | 'NOT_EXISTS';
type PasswordError =
  | 'REQUIRED'
  | 'MIN_5_CHARS'
  | 'MAX_1024_CHARS'
  | 'WRONG_PASSWORD';

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export type ViewerResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | null | Promise<User | null>;

  export interface Type {
    viewer: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | null | Promise<User | null>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    createdAt: (parent: User) => parent.createdAt,
    updatedAt: (parent: User) => parent.updatedAt,
    email: (parent: User) => parent.email,
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type CreatedAtResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    createdAt: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    updatedAt: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    email: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface SignInInput {
    email: string;
    password: string;
    createAccount: boolean;
  }

  export interface ArgsSignIn {
    input: SignInInput;
  }

  export type SignInResolver = (
    parent: undefined,
    args: ArgsSignIn,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => SignInPayload | null | Promise<SignInPayload | null>;

  export interface Type {
    signIn: (
      parent: undefined,
      args: ArgsSignIn,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => SignInPayload | null | Promise<SignInPayload | null>;
  }
}

export namespace SignInPayloadResolvers {
  export const defaultResolvers = {
    errors: (parent: SignInPayload) =>
      parent.errors === undefined ? null : parent.errors,
    token: (parent: SignInPayload) =>
      parent.token === undefined ? null : parent.token,
  };

  export type ErrorsResolver = (
    parent: SignInPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => SignInErrors | null | Promise<SignInErrors | null>;

  export type TokenResolver = (
    parent: SignInPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export interface Type {
    errors: (
      parent: SignInPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => SignInErrors | null | Promise<SignInErrors | null>;

    token: (
      parent: SignInPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;
  }
}

export namespace SignInErrorsResolvers {
  export const defaultResolvers = {
    email: (parent: SignInErrors) =>
      parent.email === undefined ? null : parent.email,
    password: (parent: SignInErrors) =>
      parent.password === undefined ? null : parent.password,
  };

  export type EmailResolver = (
    parent: SignInErrors,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => EmailError | null | Promise<EmailError | null>;

  export type PasswordResolver = (
    parent: SignInErrors,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => PasswordError | null | Promise<PasswordError | null>;

  export interface Type {
    email: (
      parent: SignInErrors,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => EmailError | null | Promise<EmailError | null>;

    password: (
      parent: SignInErrors,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => PasswordError | null | Promise<PasswordError | null>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  Mutation: MutationResolvers.Type;
  SignInPayload: SignInPayloadResolvers.Type;
  SignInErrors: SignInErrorsResolvers.Type;
}
